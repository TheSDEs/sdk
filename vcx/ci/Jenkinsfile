#!groovy

def rust
def vcx_python
def libindy
def vcx_nodejs

// ******** Artifacts Created ********
// libvcx_<ver>.deb ----> published Debian to https://repo.corp.evernym.com/deb/pool/main/libv/libvcx/
// vcx_<ver>.tar.gz ----> archived with Jenkins
// vcx_<ver>.tgz ----> published with Filely to https://repo.corp.evernym.com/filely/npm/


// ********* OTHERS ********
// libvcx.tar.gz (libvcx.so file and provision_agent_keys.py) ----> archived with Jenkins
// vcx_<ver>.deb (Nodejs Wrapper Debian Package) ----> archived with Jenkins and Published to repo.corp.evernym.com/deb/pool

testing()

def testing() {
    stage('Testing') {
        parallel([
            'Main' : { mainUbuntu() },
            // 'Android': { android() },
            // 'iOS' : { ios() }
        ])
    }
}

def getUserUid() {
    return sh(returnStdout: true, script: 'id -u').trim()
}

def build(name, file, context='.', customParams = '') {
    return docker.build("$name", "${customParams} --build-arg uid=${getUserUid()} -f $file $context")
}

def buildImage(name, filename, cache='', context='.') {
    return docker.build(name, "$cache -f $filename $context")
}

def mainUbuntu() {
    node('ubuntu-10') {
        stage('Main Build - Ubuntu') {
            def volumeName = "vcx-volume"
            def volumeInternalDir = "/sdk/vcx/output"
            try {
                checkout scm
                
				sh "docker volume rm -f $volumeName"

                def libindy = docker.build("libindy", "-f vcx/ci/Dockerfile-libindy .")

                // ******* Build the libvcx base image (runs tests and creates debian automatically) ********
                def libvcx = docker.build("libvcx", "-f vcx/ci/Dockerfile-libvcx .")
                sh "docker run --rm -v $volumeName:$volumeInternalDir libvcx"
                
                // ******** Builds and tests the Node JS Wrapper *******
                def node = docker.build("node", "-f vcx/wrappers/node/ci/Dockerfile-nodejs-wrapper .")
                sh "docker run --rm -v $volumeName:$volumeInternalDir node"
                
                // ******** Builds and tests the Python Wrapper *******
                def python = docker.build("python", "-f vcx/wrappers/python3/ci/Dockerfile-python-wrapper .")    
                sh "docker run --rm -v $volumeName:$volumeInternalDir python"
                

                // ******** Creates Npm Debian Installable Package For Node ********
                

                // if (env.BRANCH_NAME == "master") {
                    // ******** PUBLISHING (artifacts are in a Docker Volume) ********
                    sh "docker build -t publish -f vcx/ci/Dockerfile-publish ."
                    withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
                        def publish = docker.build('publish', "-f vcx/ci/Dockerfile-publish .")
                        publish.inside("--network=host -v $volumeName:$volumeInternalDir") {
                            // ******** Publish to debian repo ********
                            sh "/sdk/vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"libvcx*.deb\" https://kraken.corp.evernym.com/repo/portal_dev/upload"
                            sh "/sdk/vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"libvcx*.deb\" https://kraken.corp.evernym.com/repo/agency_dev/upload"
                            
                            // ******** Publish to npm filely repo ********
                            sh "/sdk/vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"*.tgz\" https://kraken.corp.evernym.com/repo/npm/upload"
                 
                            // ******** Publish vcx Debian To Repo (NPM PACKAGES) 
                            sh "/sdk/vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"vcx_*.deb\" https://kraken.corp.evernym.com/repo/agency_dev/upload"
                            sh "/sdk/vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"vcx_*.deb\" https://kraken.corp.evernym.com/repo/portal_dev/upload"

                            // ******** Archive with Jenkins ********
                            sh "cp $volumeInternalDir/* vcx/output"
                            sh "ls $volumeInternalDir"
                            // archiveArtifacts allowEmptyArchive: true, artifacts: 'vcx/output/**/*.tar.gz'
                            // archiveArtifacts allowEmptyArchive: true, artifacts: 'vcx*.deb'
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'vcx/output/*'

                        }
                    }
                // }

            } catch (Exception ex) {
                currentBuild.result = "FAILED"
                if (env.BRANCH_NAME == "master") {
                    fail()
                }
                echo "$ex error"
            } finally {
                sh "vcx/ci/scripts/cleanup.sh $volumeName"
                step([$class: 'WsCleanup'])
            }
        }
    }
}


def android() {
    node('ubuntu') {
        stage('Android Build') {
            try {
                checkout scm

                //Build android docker image
                rust = build('rust', 'vcx/ci/android.dockerfile', 'vcx')
                
                //Build .so files for arm64, x86, and arm
                buildAndroid(rust)

                //Package .so files into .aar 
                packageAndroid(rust)

                if (env.BRANCH_NAME == "master") {
                    //Publish package on aptly
                    publishAndroid(rust)
                }
            } catch (Exception ex) {
                // We currently do not fail the main build if the android and ios builds fai
                currentBuild.result = "FAILED"
                if (env.BRANCH_NAME == "master") {
                    fail()
                }
                echo "$ex error"
            } finally {
                step([$class: 'WsCleanup'])
            }

        }
    }
}

def ios() {
    node('macos-vcx') {
        stage('iOS Build') {
            try {
                checkout scm
                SCRIPTS_PATH="vcx/libvcx/build_scripts/ios/mac"
                WORK_DIR = "/Users/jenkins"

                // Build ios architectures
                sh "source vcx/ci/scripts/iosBuild.sh"

                // Publish to Kraken

                if (env.BRANCH_NAME == "master") {
                    withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
                        sh "find /Users/jenkins/IOSBuilds/libvcxpartial/ -type f -name 'vcx.libvcxpartial_*_universal.zip' -exec curl -u \"${KRAKEN_CREDENTIALS}\" -X POST  https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \\;"
                        sh "find /Users/jenkins/IOSBuilds/libvcxall/ -type f -name 'vcx.libvcxall_*_universal.zip' -exec curl -u \"${KRAKEN_CREDENTIALS}\" -X POST  https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \\;"
                    }
                }
            } catch (Exception ex) {
                // We currently do not fail the main build if the android and ios builds fail
                currentBuild.result = "FAILED"
                if (env.BRANCH_NAME == "master") {
                    fail()
                }
                echo "$ex error"
            } finally {
                step([$class: 'WsCleanup'])
            }

        }
    }
}

// Creates the debian package for the library, as well as gzips the libvcx.so.<version> file
// Publishes both artifacts.
def createDeb(envn) {
    envn.inside {
        CERT_SCRIPT = 'vcx/ci/scripts/getCert.sh'
        SCRIPT = 'vcx/ci/scripts/gzip_so_file.py'
        FILES = 'vcx/libvcx/target/debug/libvcx.so.* vcx/libvcx/scripts/provision_agent_keys.py'
        DEST = 'libvcx.tar.gz'

        // get Evernym Certificate onto machine
        sh "${CERT_SCRIPT}"

        // build debian
        sh 'cd vcx/libvcx/; cargo deb --no-build'


        if (env.BRANCH_NAME == "master") {
            // archive debian to Jenkins
            archiveArtifacts allowEmptyARchive: true, artifacts: "vcx/libvcx/target/debian/libvcx_*_amd64.deb"

            // archive .so file to Jenkins
            sh "python ${SCRIPT} ${FILES} ${DEST}"
            archiveArtifacts allowEmptyARchive: true, artifacts: DEST

            // upload debian to Repo
            withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
                sh "find vcx/libvcx/target/debian/ -type f -name 'libvcx_*_amd64.deb' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/agency_dev/upload -F file=@{} \\;"
                sh "find vcx/libvcx/target/debian/ -type f -name 'libvcx_*_amd64.deb' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/portal_dev/upload -F file=@{} \\;"
            }
        }
    }
}

// Creates the tgz file that can be 'npm install'-ed.
def testNodeWrapper(envn) {
    dir('vcx/wrappers/node'){
        envn.inside() {
            sh 'npm -v'
            sh 'npm ci'
            sh 'npm run lint'
            sh 'npm test'
            sh 'npm run compile'
            sh 'npm pack'
            archiveArtifacts allowEmptyArchive: true, artifacts: '**/*.tgz'
        }
    }
}

def renameAndUploadNpmTgz(envn, destDir) {
    envn.inside {
        sh "pwd"
        sh "ls"
        CERT_SCRIPT = 'vcx/ci/scripts/getCert.sh'
        sh "${CERT_SCRIPT}"
        filename = 'vcx/wrappers/node/vcx-*.tgz'
        sh "cp ${filename} vcx"
        sh "ls vcx"
        sh "echo ${destDir}"

        withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
            sh "pwd"
            sh "cd vcx; rename \"s/\\.tgz\$/_amd64\\.tgz/\" *.tgz"
            sh "cd vcx; rename \"s/vcx-/vcx_/\" *.tgz"
            sh 'cd vcx; ls -a'
            sh "cd vcx; find . -type f -name '*.tgz' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/npm/upload -F 'file=@{}' \\;"
        }
    }
}

// Creates debian that can install through npm.
def createNpmDeb(app, npmFilename){
    dir('vcx') {
        app.inside {
            CERT_SCRIPT = 'ci/scripts/getCert.sh'
            sh "${CERT_SCRIPT}"
            sh 'ls'
            sh 'python ci/scripts/create_npm_deb.py wrappers/node/vcx-*.tgz'
            sh 'ls'
            archiveArtifacts allowEmptyArchive: true, artifacts: 'vcx*.deb'

            withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
                // upload npm module
                sh "find wrappers/node/ -type f -name 'vcx-*.tgz' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/agency_dev/upload -F file=@{} \\;"
                sh "find wrappers/node/ -type f -name 'vcx-*.tgz' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/portal_dev/upload -F file=@{} \\;"

                // upload debian
                sh "find . -type f -name 'vcx_*_amd64.deb' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/agency_dev/upload -F file=@{} \\;"
                sh "find . -type f -name 'vcx_*_amd64.deb' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST https://kraken.corp.evernym.com/repo/portal_dev/upload -F file=@{} \\;"
            }
        }
    }
}

def fail() {
    def message = [
        message: "$JOB_NAME - Build # $BUILD_NUMBER - fail: Check console output at $BUILD_URL to view the results."
    ]
    slackSend message
}

def buildAndroid(envn) {
    envn.inside {
        ANDROID_SCRIPT_PATH = 'vcx/ci/scripts/androidBuild.sh'
        sh "./${ANDROID_SCRIPT_PATH} arm"
        sh "./${ANDROID_SCRIPT_PATH} x86"
        //sh "./${ANDROID_SCRIPT_PATH} arm64"
        //Todo: get parallel processing to work. Currently it fails on Jenkins. It must share files or something
        // parallel([
        //     'arm': { sh "./${ANDROID_SCRIPT_PATH} arm"},
        //     'x86': { sh "./${ANDROID_SCRIPT_PATH} x86"},
        //     'arm64': { sh "./${ANDROID_SCRIPT_PATH} arm64"}
        // ])
    }
}

def packageAndroid(envn) {
    envn.inside {
        ANDROID_SCRIPT_PATH = 'vcx/ci/scripts/androidPackage.sh'
        sh "chmod +x ${ANDROID_SCRIPT_PATH}"
        sh "./${ANDROID_SCRIPT_PATH}"
    }
}

def publishAndroid(envn) {
    envn.inside {
        CERT_SCRIPT = 'vcx/ci/scripts/getCert.sh'
        sh "${CERT_SCRIPT}"
        withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
            sh "echo before publishing"
            sh "find vcx/wrappers/java/vcx/build/outputs/aar/ -type f -name 'com.evernym-vcx_*-release.aar' -exec curl --cacert /tmp/cert/ca.crt -u \"${KRAKEN_CREDENTIALS}\" -X POST  https://kraken.corp.evernym.com/repo/android/upload -F 'file=@{}' \\;"
        }
    }
}
